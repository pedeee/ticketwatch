name: Ticket watch

########################################
#  When to run
########################################
on:
  # hourly scan at :00
  schedule:
    - cron:  '0 * * * *'
  # manual button in the UI
  workflow_dispatch:

########################################
#  Jobs – one job per batch file
########################################
jobs:
  watch:
    # 🛑  Skip EVERYTHING if this comes from an un-trusted PR (fork)
    if: github.event.pull_request == null

    strategy:
      fail-fast: false
      matrix:
        include:
          # primary=true  → only this job may send the “✓ No changes” ping
          - batch_file: 'url_batches/batch1.txt'   # primary
            primary:   true
          - batch_file: 'url_batches/batch2.txt'
            primary:   false
          - batch_file: 'url_batches/batch3.txt'
            primary:   false
          - batch_file: 'url_batches/batch4.txt'
            primary:   false
          - batch_file: 'url_batches/batch5.txt'
            primary:   false

    # never let overlapping scans fight over *.state.json
    concurrency:
      group: ticketwatch-${{ matrix.batch_file }}
      cancel-in-progress: true

    permissions:
      contents: write          # let the bot commit *.state.json
      pull-requests: write     # allow opening a PR if branch-protection blocks push

    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    # ── 1 Checkout ─────────────────────────────────────────────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    # ── 2 Sync local clone ────────────────────────────────────────────────
    - name: Sync to latest main
      run: git pull --rebase origin "${{ github.ref }}"

    # ── 3 Python & deps ───────────────────────────────────────────────────
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    # ── 4 Run watcher ─────────────────────────────────────────────────────
    - name: Run watcher
      env:
        TG_TOKEN:  ${{ secrets.TG_TOKEN }}
        TG_CHAT:   ${{ secrets.TG_CHAT }}
        PRIMARY:   ${{ matrix.primary }}
      run: python ticketwatch_v2.py "${{ matrix.batch_file }}"

    # ── 5 Commit (or PR) the updated state file ───────────────────────────
    - name: Commit & push state
      id: commit
      run: |
        git config user.name  "ticketwatch bot"
        git config user.email "bot@example.invalid"

        git add "${{ matrix.batch_file }}.state.json" || true
        if git diff-index --quiet HEAD --; then
          echo "skip_commit=true" >> $GITHUB_OUTPUT
        else
          git commit -m "auto: update ${{ matrix.batch_file }}.state.json"
          # attempt fast-forward push (may be blocked by branch protection)
          if ! git push --force-with-lease; then
              echo "need_pr=true" >> $GITHUB_OUTPUT
          fi
        fi

    # ── 6 Open a PR if branch-protection blocked the direct push ──────────
    - name: Create pull-request for state update
      if: steps.commit.outputs.need_pr == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        commit-message: "auto: update ${{ matrix.batch_file }}.state.json"
        branch:         "bot/state-${{ matrix.batch_file }}"
        title:          "State update for ${{ matrix.batch_file }}"
        body:           "Automated state-file update by the Ticketwatch workflow."
        delete-branch:  true         # prune merged bot branches

  # ── 7 Summary job so the whole workflow turns green ─────────────────────
  summary:
    if: always()
    needs: watch
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "All batch jobs finished."
