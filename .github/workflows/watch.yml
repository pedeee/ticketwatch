name: Ticket watch

##############################
#  When to run
##############################
on:
  # hourly scan at :00
  schedule:
    - cron:  '0 * * * *'
  # manual button in the UI
  workflow_dispatch:

##############################
#  Jobs matrix â€“ one job per
#  batch file in url_batches/
##############################
jobs:
  watch:
    # ðŸ›‘ Skip EVERYTHING if this run comes from
    #    an un-trusted PR (fork) â€“ secrets stay hidden.
    if: github.event.pull_request == null

    # run five parallel jobs, one per batch
    strategy:
      fail-fast: false
      matrix:
        batch_file:
          - 'url_batches/batch1.txt'
          - 'url_batches/batch2.txt'
          - 'url_batches/batch3.txt'
          - 'url_batches/batch4.txt'
          - 'url_batches/batch5.txt'

    # never let two overlapping scans fight over state files
    concurrency:
      group: ticketwatch-${{ matrix.batch_file }}
      cancel-in-progress: true

    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    # ---------- 1. checkout --------------------------------------------------
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    # ---------- 2. keep local clone in sync ----------------------------------
    - name: Sync to latest main
      run: |
        git pull --rebase origin "${{ github.ref }}"

    # ---------- 3. set up Python + deps --------------------------------------
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # ---------- 4. run the watcher ------------------------------------------
    - name: Run watcher
      env:
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
        TG_CHAT:  ${{ secrets.TG_CHAT }}
        BATCH_FILE: ${{ matrix.batch_file }}
      run: |
        python ticketwatch.py "$BATCH_FILE"

    # ---------- 5. commit & push state file ----------------------------------
    - name: Commit & push state
      # never try to push if the run made no changes
      if: success()
      run: |
        git config user.name  "ticketwatch bot"
        git config user.email "bot@example.invalid"

        git add "${{ matrix.batch_file }}.state.json" || true
        if git diff-index --quiet HEAD --; then
            echo "nothing to commit"
        else
            git commit -m "auto: update ${{ matrix.batch_file }}.state.json"
            # fast-forward only â€“ prevents the lock-ref / divergence errors
            git push --set-upstream origin "${{ github.ref }}" --force-with-lease
        fi

  # -------- summary job so the workflow turns green even if some
  #         batches find no changes -------------------------------------------
  summary:
    if: always()
    needs: watch
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "All batch jobs finished."
