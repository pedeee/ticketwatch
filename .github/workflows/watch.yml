name: Ticket watch

########################################
#  When to run
########################################
on:
  # hourly scan at :00
  schedule:
    - cron:  '0 * * * *'
  # manual button in the UI
  workflow_dispatch:

# Workflow-level permissions
permissions:
  contents: write
  pull-requests: write
  actions: read

########################################
#  Jobs – one job per batch file
########################################
jobs:
  watch:
    # 🛑  Skip EVERYTHING if this comes from an un-trusted PR (fork)
    if: github.event.pull_request == null

    strategy:
      fail-fast: false
      matrix:
        include:
          # primary=true  → only this job may send the “✓ No changes” ping
          - batch_file: 'url_batches/batch1.txt'   # primary
            primary:   true
          - batch_file: 'url_batches/batch2.txt'
            primary:   false
          - batch_file: 'url_batches/batch3.txt'
            primary:   false
          - batch_file: 'url_batches/batch4.txt'
            primary:   false
          - batch_file: 'url_batches/batch5.txt'
            primary:   false

    # never let overlapping scans fight over *.state.json
    concurrency:
      group: ticketwatch-${{ matrix.batch_file }}
      cancel-in-progress: true

    permissions:
      contents: write          # let the bot commit *.state.json
      pull-requests: write     # allow opening a PR if branch-protection blocks push
      actions: read            # allow reading workflow status

    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    # ── 1 Checkout ─────────────────────────────────────────────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    # ── 2 Sync local clone ────────────────────────────────────────────────
    - name: Sync to latest main
      run: git pull --rebase origin "${{ github.ref }}"

    # ── 3 Python & deps ───────────────────────────────────────────────────
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    # ── 4 Run watcher ─────────────────────────────────────────────────────
    - name: Run watcher
      env:
        TG_TOKEN:  ${{ secrets.TG_TOKEN }}
        TG_CHAT:   ${{ secrets.TG_CHAT }}
        PRIMARY:   ${{ matrix.primary }}
      run: python ticketwatch_v2.py "${{ matrix.batch_file }}"

    # ── 5 Create PR for state updates (always use PR method) ─────────────
    - name: Create pull-request for state update
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "auto: update ${{ matrix.batch_file }}.state.json"
        title: "🤖 State update for ${{ matrix.batch_file }}"
        body: |
          ## 🤖 Automated State Update
          
          **Batch:** `${{ matrix.batch_file }}`
          **Timestamp:** ${{ github.run_id }}
          **Triggered by:** Hourly ticketwatch scan
          
          This PR contains updated state data from the latest scan.
        branch: "bot/state-${{ matrix.batch_file }}"
        delete-branch: true
        base: main
        add-paths: |
          ${{ matrix.batch_file }}.state.json
          ${{ matrix.batch_file }}

  # ── 7 Summary job so the whole workflow turns green ─────────────────────
  summary:
    if: always()
    needs: watch
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "All batch jobs finished."
